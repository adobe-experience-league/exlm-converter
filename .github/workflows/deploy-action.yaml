name: Deploy Converter Action

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - stage
      - develop

jobs:
  env-select:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.env_select.outputs.env_name }}
    steps:
      - name: Select an Environment
        id: env_select
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_name=prod" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" = "refs/heads/stage" ]; then
            echo "env_name=stage" >> "$GITHUB_OUTPUT"
          else
            echo "env_name=dev" >> "$GITHUB_OUTPUT"
          fi
      - name: Selected Environment is [${{ steps.env_select.outputs.env_name }}]
        run: |
          echo "Environment: ${{ steps.env_select.outputs.env_name }}"
  deploy:
    runs-on: ubuntu-latest
    needs: env-select
    environment:
      name: ${{ needs.env-select.outputs.env_name }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ needs.env-select.outputs.env_name == '' }}
        run: |
          echo "An Environment ha not been selected by the previous job, this might be an issue with the action."
      - if: ${{ needs.env-select.outputs.env_name != '' }}
        run: |
          echo "An Environment was selected, proceeding with the deployment to ${{ needs.env-select.outputs.env_name }}."
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: Run npm ci
        run: npm ci
      - name: Deploy Converter Action to ${{ needs.env-select.outputs.env_name }}
        run: ./node_modules/.bin/aio app deploy
        env:
          KHOROS_ORIGIN: ${{ secrets.KHOROS_ORIGIN }}
          KHOROS_API_SECRET: ${{ secrets.KHOROS_API_SECRET }}
          IMS_ORIGIN: ${{ secrets.IMS_ORIGIN }}
          IMS_CLIENT_ID: ${{ secrets.IMS_CLIENT_ID }}
          IMS_CLIENT_SECRET: ${{ secrets.IMS_CLIENT_SECRET }}
          IMS_AUTHORIZATION_CODE: ${{ secrets.IMS_AUTHORIZATION_CODE }}
          IPASS_API_KEY: ${{ secrets.IPASS_API_KEY }}
          AIO_RUNTIME_AUTH: ${{ secrets.AIO_RUNTIME_AUTH }}
          AIO_RUNTIME_NAMESPACE: ${{ secrets.AIO_RUNTIME_NAMESPACE }}
          AEM_AUTHOR_URL: ${{ vars.AEM_AUTHOR_URL }}
          OWNER: ${{ vars.OWNER }}
          REPO: ${{ vars.REPO }}
          BRANCH: ${{ vars.BRANCH }}
      - name: Publish Fragments
        run: npm run publish-fragments
        env:
          OWNER: ${{ vars.OWNER }}
          REPO: ${{ vars.REPO }}
          BRANCH: ${{ vars.BRANCH }}
